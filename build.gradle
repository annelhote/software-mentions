buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
//        classpath "gradle.plugin.org.gretty:gretty:2.3.1"
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}

apply plugin: 'java-library'
apply plugin: 'base'
apply plugin: 'com.github.kt3k.coveralls'

group = "org.grobid.software"
version = '0.7.1-SNAPSHOT'

description = """software-mentions"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven {
        url new File(rootProject.rootDir, "lib")
    }
}

ext {
    // treating them separately, these jars will be flattened into grobid-core.jar on installing,
    // to avoid missing dependencies from the projects that include grobid-core (see 'jar' taskin grobid-core)
    localLibs = ['org/dkpro/statistics/dkpro-statistics-agreement/2.2.0-SNAPSHOT/dkpro-statistics-agreement-2.2.0-SNAPSHOT.jar']
}

dependencies {

    // packaging local libs inside output jar
    //implementation fileTree(dir: new File(rootProject.rootDir, 'lib'), include: localLibs)

    //Grobid
    implementation group: 'org.grobid', name: 'grobid-core', version: '0.7.1-SNAPSHOT'
    implementation group: 'org.grobid', name: 'grobid-trainer', version: '0.7.1-SNAPSHOT'
    implementation group: 'net.arnx', name: 'jsonic', version: '1.3.10'
    //compile group: 'org.dkpro.statistics', name: 'dkpro-statistics-agreement', version: '2.2.0-SNAPSHOT'
    implementation "me.tongfei:progressbar:0.9.0"

    //Logging
    //implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    //implementation 'org.slf4j:slf4j-api:1.7.25'
    //implementation 'log4j:log4j:1.2.17'

    //Apache commons
    implementation group: 'commons-pool', name: 'commons-pool', version: '1.6'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.5'

    //Dropwizard
    implementation "io.dropwizard:dropwizard-core:1.3.23" 
    implementation "io.dropwizard:dropwizard-assets:1.3.23"
    implementation "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.2"
    implementation "io.dropwizard:dropwizard-testing:1.3.23"
    implementation "io.dropwizard:dropwizard-forms:1.3.23"
    implementation "io.dropwizard:dropwizard-client:1.3.23"
    implementation "io.dropwizard:dropwizard-auth:1.3.23"
    implementation "io.dropwizard.metrics:metrics-core:4.0.0"
    implementation "io.dropwizard.metrics:metrics-servlets:4.0.0"

    implementation group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    //Parsing xml/json
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'
    implementation group: 'xom', name: 'xom', version: '1.3.2'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'

    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
    implementation group: 'asm', name: 'asm', version: '3.3.1'

    implementation group: 'org.semanticweb.yars', name: 'nxparser-parsers', version: '2.3.3'

    //Tests
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

configurations.all { 
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
    exclude group: 'org.slf4j', module: "slf4j-log4j12"    
    //if (project.gradle.startParameter.taskNames.contains('run') ||
    //   project.gradle.startParameter.taskNames.contains('post_process_corpus'))
    //    exclude group: 'org.slf4j', module: "slf4j-jdk14"  
    if (project.gradle.startParameter.taskNames.contains('run'))
        exclude group: 'org.slf4j', module: "slf4j-jdk14"
}

test {
    testLogging.showStandardStreams = true
    exclude '**/**IntegrationTest**'
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: 'java'
apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

task install(dependsOn: publishToMavenLocal)

task mainJar(type: ShadowJar) {
    zip64 true
    from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.SoftwareMain'
    }
    //from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }

    configurations = [project.configurations.runtimeClasspath]
}


jar {
    dependsOn mainJar
    enabled true
}

artifacts {
    archives jar
    archives shadowJar
}

task copyModels(type: Copy) {
    //doLast 
    //{
        from "${rootDir}/resources/models/"
        include "**"
        into "${rootDir}/../grobid-home/models/"
    doLast 
    { 
        ant.gunzip(src: "${rootDir}/resources/models/software/model.wapiti.gz", dest: "${rootDir}/../grobid-home/models/software/")
    }
}

task installScibert {
    doLast {
        download {
            src "https://grobid.s3.amazonaws.com/software-BERT_CRF-0.3.0.zip"
            dest "${rootDir}/../grobid-home/models/"
            overwrite false
        }
        ant.unzip(src: "${rootDir}/../grobid-home/models/software-BERT_CRF-0.3.0.zip", dest: "${rootDir}/../grobid-home/models/")
        download {
            src "https://grobid.s3.amazonaws.com/software_context_bert-0.3.0.zip"
            dest "${rootDir}/../grobid-home/models/"
            overwrite false
        }
        ant.unzip(src: "${rootDir}/../grobid-home/models/software_context_bert-0.3.0.zip", dest: "${rootDir}/../grobid-home/models/")
        download {
            src "https://grobid.s3.amazonaws.com/software_context_used_bert-0.3.0.zip"
            dest "${rootDir}/../grobid-home/models/"
            overwrite false
        }
        ant.unzip(src: "${rootDir}/../grobid-home/models/software_context_used_bert-0.3.0.zip", dest: "${rootDir}/../grobid-home/models/")
        download {
            src "https://grobid.s3.amazonaws.com/software_context_creation_bert-0.3.0.zip"
            dest "${rootDir}/../grobid-home/models/"
            overwrite false
        }
        ant.unzip(src: "${rootDir}/../grobid-home/models/software_context_creation_bert-0.3.0.zip", dest: "${rootDir}/../grobid-home/models/")
        download {
            src "https://grobid.s3.amazonaws.com/software_context_shared_bert-0.3.0.zip"
            dest "${rootDir}/../grobid-home/models/"
            overwrite false
        }
        ant.unzip(src: "${rootDir}/../grobid-home/models/software_context_shared_bert-0.3.0.zip", dest: "${rootDir}/../grobid-home/models/")
    }
}

//tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:deprecation"
//    options.compilerArgs << "-Xlint:unchecked"
//}

wrapper {
    gradleVersion "7.1.1"
}

// Custom Tasks

///////////////////////////
// train and eval ML models

// Run like this: ./gradlew eval_software -PgH=/path/grobid/home
/*task(trainer, dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '0', 'software', getArg('gH', '../grobid-home'), getArg('b', '0.00001 20 0'), getArg('t', '1')
//    jvmArgs '-Xms2g', '-Xmx8g'
}*/

// Run like this: ./gradlew train_software -PgH=/path/grobid/home 
task(train_software, dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.SoftwareTrainer'
    classpath = sourceSets.main.runtimeClasspath
//    args '0', 'software', getArg('gH', '../grobid-home'), getArg('b', ''),
//    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software -PgH=/path/grobid/home
task(eval_software, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software', getArg('gH', '../grobid-home')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disambiguation -PgH=/path/grobid/home
task(eval_software_disambiguation, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_disambiguation', getArg('gH', '../grobid-home')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_doc_level -PgH=/path/grobid/home
task(eval_software_doc_level, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_doc_level', getArg('gH', '../grobid-home')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disamb_doc_level -PgH=/path/grobid/home
task(eval_software_disamb_doc_level, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_disamb_doc_level', getArg('gH', '../grobid-home')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disambiguation_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_disambiguation_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_disambiguation', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_doc_level_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_doc_level_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_doc_level', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disamb_doc_level_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_disamb_doc_level_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_disamb_doc_level', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disambiguation_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_disambiguation_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_disambiguation', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_doc_level_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_doc_level_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_doc_level', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_software_disamb_doc_level_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_disamb_doc_level_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_disamb_doc_level', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

////////////////////
// corpus processing

// Run like this: ./gradlew annotated_corpus_generator_csv -Ppdf=/path/input/pdf -Pcsv=path/csv -Poutput=/output/directory
task(annotated_corpus_generator_csv, dependsOn: 'classes', type: JavaExec, group: 'import') {
    main = 'org.grobid.trainer.AnnotatedCorpusGeneratorCSV'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('pdf', ''), getArg('csv', ''), getArg('output', 'resources/dataset/software/corpus/')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew export_corpus_json -Pinput=/path/input/in.tei.xml -Poutput=/path/output/out.json
task(export_corpus_json, dependsOn: 'classes', type: JavaExec, group: 'export') {
    main = 'org.grobid.trainer.ExportCorpusJson'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('input', ''), getArg('output', '')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew clean_tei_corpus_file -Ptei=/path/input/tei 
task(clean_tei_corpus_file, dependsOn: 'classes', type: JavaExec, group: 'import') {
    main = 'org.grobid.core.utilities.XMLUtilities'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('xml', 'resources/dataset/software/corpus/all.tei.xml')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew post_process_corpus_no_mention -Pxml=/path/input/corpus/tei/xml/file -Pcsv=path/csv -Ppdf=path/pdf -Poutput=/output/path/tei/corpus/file
task(post_process_corpus, dependsOn: 'classes', type: JavaExec, group: 'import') {
    main = 'org.grobid.trainer.XMLCorpusPostProcessorNoMention'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('xml', ''), getArg('csv', ''), getArg('pdf', ''), getArg('output', '')
    jvmArgs '-Xms2g', '-Xmx8g'
}

//////////
// service
apply plugin: 'application'
application {
    mainClassName = 'org.grobid.service.SoftwareApplication'

    run {
        args = ['server', 'resources/config/server.yml']
    }
}
